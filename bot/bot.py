import telebot
import config
import random
import masiv_filtr
from telebot import types

import sqlite3

# config
# –≤–Ω—É—Ç—Ä–∏ config.cfg -> TOKEN: ''
bot = telebot.TeleBot(config.Config('../config.cfg')['TOKEN'])

# –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∏–∑–±–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
main_menu = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
media_menu = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞:"
misc_menu = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω–æ–µ:"

back_button = "‚óÄ–Ω–∞–∑–∞–¥"

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def connect_to_database():
    conn = sqlite3.connect('../sqlbase.db')
    return conn, conn.cursor()

def is_user_exists(user_id):
    conn, cursor = connect_to_database()
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def add_new_user(user_id):
    conn, cursor = connect_to_database()
    cursor.execute("INSERT INTO users (user_id, balance) VALUES (?, ?)", (user_id, 0))
    conn.commit()
    conn.close()

@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('—Ñ–æ—Ç–æ/Hi.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    print(user_id)
    if not is_user_exists(user_id):
        add_new_user(user_id)

    # keyboard_–∫–ª–∞–≤–∞_—Ç–æ–µ—Å—Ç—å
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üóÉ—Ä–∞–∑–Ω–æ–µ")
    item2 = types.KeyboardButton("üñº–º–µ–¥–∏—è")
    # item3 = types.KeyboardButton("–∑–∞–≥–∞–¥–∫–∏")
    markup.add(item1, item2)

    bot.send_message(message.chat.id,"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!"
                                     "\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º."
                     .format(message.from_user, bot.get_me()),parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def test(message):
    # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ chat_id –∏ text –Ω–µ–±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
    chat_id = message.chat.id
    text = message.text.lower()
    user_id = message.from_user.id

    if message.chat.type == 'private':
        # —Ç–µ–ø–µ—Ä—å –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        if text == 'üé≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            current_balance = get_user_balance(user_id)
            
            if current_balance < 10:
                bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–∞–º –Ω—É–∂–Ω–æ 10 –º–æ–Ω–µ—Ç.")
            else:
                new_balance = current_balance - 10
                update_user_balance(user_id, new_balance)
                bot.send_message(chat_id, f"–ë–∞–ª–∞–Ω—Å: {new_balance}")
                bot.send_message(chat_id, f" –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {str(random.randint(0, 100))}")

        elif text == 'ü§ë –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥':
            current_balance = get_user_balance(user_id)
            new_balance = current_balance + 1
            update_user_balance(user_id, new_balance)
            bot.send_message(chat_id, f"üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –º–æ–Ω–µ—Ç—É. –ë–∞–ª–∞–Ω—Å: {new_balance}")
        
        elif text == 'üíº –º–æ–π –±–∞–ª–∞–Ω—Å':
            current_balance = get_user_balance(user_id)
            bot.send_message(chat_id, f"üíµ –ë–∞–ª–∞–Ω—Å: {current_balance}")

        elif text == 'üòä –∫–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)
            bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        elif text == 'üñº–º–µ–¥–∏—è':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–•–æ—á—É –æ–±–æ–∏")
            item2 = types.KeyboardButton("–°–∫–∏–Ω—å –≥–∏—Ñ–∫—É")
            item3 = types.KeyboardButton(back_button)
            markup.add(item1, item2, item3)
            bot.send_message(chat_id, media_menu, reply_markup=markup)
        elif text == 'üóÉ—Ä–∞–∑–Ω–æ–µ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
            item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
            item3 = types.KeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ?")
            item4 = types.KeyboardButton("ü§ë –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥")
            item5 = types.KeyboardButton("üíº –ú–æ–π –±–∞–ª–∞–Ω—Å")
            item6 = types.KeyboardButton(back_button)
            markup.add(item1, item2, item3, item4, item5, item6)
            bot.send_message(chat_id, misc_menu, reply_markup=markup)
        elif text == '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ?':
            bot.send_message(chat_id, '—è –±–æ—Ç —Å–æ–∑–¥–∞–Ω—ã–π –∫—Ä–∏–≤–æ—Ä—É–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç–æ–º, —Å–µ–π—á–∞—Å —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä, –≥–∏—Ñ–∫—É, —Ñ–æ—Ç–æ\n–¢–∞–∫ –∂–µ –º–æ–≥—É —Ç–µ–±—è –ø–æ—Å–ª–∞—Ç—å')
        elif text == '—Ö–æ—á—É –æ–±–æ–∏':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–•–æ—á—É –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏üòé")
            item2 = types.KeyboardButton("–ê–Ω–∏–º–µ")
            item3 = types.KeyboardButton(back_button)
            markup.add(item1, item2, item3)
            bot.send_message(chat_id, '–ê–Ω–∏–º–µ –∏–ª–∏ –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏üòé?', reply_markup=markup)
        elif text == '—Ö–æ—á—É –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏üòé':
            send_random_image(chat_id, masiv_filtr.oboi_gryt)
        elif text == '–∞–Ω–∏–º–µ':
            send_random_image(chat_id, masiv_filtr.oboi_anime)
        elif text in ["–ø—Ä–∏–≤–µ—Ç"]:
            bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç')
            gif1 = open("–≥–∏—Ñ/AnimatedSticker5.tgs", 'rb')
            bot.send_sticker(chat_id, gif1)
        elif text in masiv_filtr.otvet:
            bot.send_message(chat_id, '–í–∞–º –ø–∏—à–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:\n"–ó–∞—á–µ–º —è –Ω–∞—É—á–∏–ª –±–æ—Ç–∞ –ø–æ—Å—ã–ª–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç? –ó–ê–ß–ï–ú?.."')
            foto1 = open("—Ñ–æ—Ç–æ/ric.jpg", 'rb')
            bot.send_photo(chat_id, foto1)
        elif text in masiv_filtr.mat:
            bot.send_message(chat_id, '–°–∞–º –∏–¥–∏ –Ω–∞ —Ö—É–π')
            gif2 = open("–≥–∏—Ñ/Sticker.tgs", 'rb')
            bot.send_sticker(chat_id, gif2)
        elif text == '—Å–∫–∏–Ω—å –≥–∏—Ñ–∫—É':
            bot.send_message(chat_id, '–¥–µ—Ä–∂–∏')
            gif_path = send_random_image(chat_id, masiv_filtr.gif)
            bot.send_video(chat_id, open(gif_path, 'rb'))
        elif text == back_button:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üóÉ—Ä–∞–∑–Ω–æ–µ")
            item2 = types.KeyboardButton("üñº–º–µ–¥–∏—è")
            # item3 = types.KeyboardButton("–∑–∞–≥–∞–¥–∫–∏")
            markup.add(item1, item2)
            bot.send_message(chat_id, main_menu, reply_markup=markup)
        elif text in masiv_filtr.Vi:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üóÉ—Ä–∞–∑–Ω–æ–µ")
            item2 = types.KeyboardButton("üñº–º–µ–¥–∏—è")
            # item3 = types.KeyboardButton("–∑–∞–≥–∞–¥–∫–∏")
            markup.add(item1, item2)
            bot.send_message(chat_id, '–Ø —Ç—É—Ç, —á—Ç–æ-—Ç–æ —Ö–æ—Ç–µ–ª–∏?', reply_markup=markup)
        else:
            bot.send_message(chat_id, '—è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)
    except Exception as e:
        print(repr(e))

def send_random_image(chat_id, image_list):
    if image_list:
        bot.send_message(chat_id, '–¥–µ—Ä–∂–∏ üòé')
        img_path = random.choice(image_list)
        bot.send_photo(chat_id, photo=open(img_path, 'rb'))

def get_user_balance(user_id):
    conn, cursor = connect_to_database()
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def update_user_balance(user_id, new_balance):
    conn, cursor = connect_to_database()
    cursor.execute("UPDATE users SET balance=? WHERE user_id=?", (new_balance, user_id))
    conn.commit()
    conn.close()

# RUN
bot.polling(none_stop=True)